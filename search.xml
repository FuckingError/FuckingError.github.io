<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring-IOC实践</title>
      <link href="/2019/12/11/Spring-IOC%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/12/11/Spring-IOC%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring:IOC理论</title>
      <link href="/2019/12/11/Spring-IOC%E7%90%86%E8%AE%BA/"/>
      <url>/2019/12/11/Spring-IOC%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<table><tr><td bgcolor=#87ceeb><h2>IOC基础</h2></td></tr></table>新建一个空白的maven项目 <table><tr><td bgcolor=#77bc1f><h3>    分析实现    </h3></td></tr></table><table><tr><td bgcolor=#ff9800><h5>    先用之前的方式写一段代码    </h5></td></tr></table><p>项目目录结构</p><p><img src="D:%5Chexo%5Csource_posts%5CSpring-IOC%E7%90%86%E8%AE%BA%5Cimage-20191211160941055.png" alt="image-20191211160941055"></p><blockquote><p>这里的目录结构是:project 里面 新建 module 方便管理 一个项目中的多个demo </p><p>也算是一个 平时练习一些Demo创建项目的小技巧吧</p><p><a href="">详情链接</a></p></blockquote><p><strong>1.先写一个UserDao接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>2.再去Dao的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"默认获取用户数据"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>3.写UserService的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>4.Service实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();<span class="comment">// Service实现类 调用 Dao</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        userDao.getUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><strong>5.测试一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//用户实际 调用的是 业务层,dao层 他们不需要接触</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        userService.getUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>这是我们原来的方式 现在在 Dao的实现类 增加一个</p></blockquote><p><strong>6.增加一个Dao 实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加一个Dao实现类 此时 就要更改Service的实现类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"MySql获取用户数据"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>增加一个Dao实现类 此时 就要更改Service的实现类</p></blockquote><p><strong>7.更改Service实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//private UserDao userDao = new UserDaoImpl();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoMySqlImpl();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        userDao.getUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p> 再假设 我们再增加一个UserDao 的实现类</p><p> 则又要修改service实现类,假如 我们这种需求非常大,这种方式就根本不适用了</p><p> <font color="red">每次变动，都需要修改大量代码,<strong>耦合性太高</strong>，牵一发而动全身</font></p><table><tr><td bgcolor=#ff9800><h5>    那么我们该如何去解决呢    </h5></td></tr></table><p>在ServiceImpl中，我们需要用到 UserDao时，不去实现它，而是留出一个<strong>接口</strong>，利用<strong>set</strong>,修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//private UserDao userDao = new UserDaoImpl();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//private UserDao userDao = new UserDaoMySqlImpl();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserDao userDao;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//利用set 实现 动态实现值的 注入</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        userDao.getUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//用户实际 调用的是 业务层,dao层 他们不需要接触</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        UserServiceImpl service = <span class="keyword">new</span> UserServiceImpl();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//使用sql</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        service.setUserDao(<span class="keyword">new</span> UserDaoMySqlImpl());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        service.getUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//改为默认方式</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        service.setUserDao(<span class="keyword">new</span> UserDaoImpl());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        service.getUser();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>测试结果</p><p><strong>可以让用户动态选择 使用 哪一个 Dao实现类</strong></p><p><img src="D:%5Chexo%5Csource_posts%5CSpring-IOC%E7%90%86%E8%AE%BA%5Cimage-20191211193009114.png" alt="image-20191211193009114"></p><table><tr><td bgcolor=#77bc1f><h3>    两种方式的区别    </h3></td></tr></table><p>之前 所有的东西 都是由 程序(<font color="purple">程序员</font>) 去进行控制创建(<font color="purple">写死了</font>)</p><p>而现在是由<strong>调用者</strong>自行控制创建对象，把主动权教给了<strong>调用者</strong>,<strong>被调用者</strong>不用管怎么创建，怎么实现，<strong>它只负责提供一个接口</strong>(<font color="red">本例中 提供调用者一个 set方法</font>)，变成了被动的接受对象</p><p>这种思想,从 本质 上 解决了问题</p><ul><li><p>代码间的耦合性大大降低</p></li><li><p>我们程序员也不再去管理对象的创建了（<font color="purple">不需要因为Dao层的变动，而去修改Service层的代码</font>）, 可以更多地去关注 <strong>业务的实现</strong> </p></li></ul><p>这也就是IOC的原型!</p><table><tr><td bgcolor=#87ceeb><h2>IOC本质</h2></td></tr></table>上面两种问题的解决方法 如下图:<p><img src="D:%5Chexo%5Csource_posts%5CSpring-IOC%E7%90%86%E8%AE%BA%5Cimage-20191211195811389.png" alt="image-20191211195811389"></p><p><strong>控制反转 IOC</strong>（Inversion of Control是一种设计思想  ,  <strong>DI(依赖注入)</strong> 是 实现IOC的一种方法</p><p>在没有IOC的程序中,我们使用面向对象编程, 对象的创建与对象间的依赖关系 完全硬编码在程序中</p><p>对象的创建由程序自己控制</p><p>控制反转后 , 将对象的创建 转移给 第三方 </p><p><font color="red"><strong>控制反转可以理解为: 获得依赖对象的方式 反转了</strong></font></p><hr><p>IOC 是Spring框架的 核心内容 , 使用多种方式 完美地实现了 IOC , 可以使用XML配置 , 也可以使用注解 , 新版本的Spring也可以 零配置 实现IOC</p><p><strong>控制反转</strong> 是 一种 通过描述(<strong>XML 或 注解)</strong>  并通过 第三方 去生产 或 获取特定对象的 方式.</p><p>在Spring中 实现 控制反转的是 <strong>IOC 容器</strong>,其实现方式是 <strong>依赖注入</strong>(Dependency Injection,DI).</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/71929266.png" alt="1569935285010.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown常用语法</title>
      <link href="/2019/12/11/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/12/11/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="你们好"><a href="#你们好" class="headerlink" title="你们好"></a>你们好</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2019/12/06/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/06/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-我的标题"><a href="#1-我的标题" class="headerlink" title="1.我的标题"></a>1.我的标题</h1><h2 id="我的标题2"><a href="#我的标题2" class="headerlink" title="我的标题2"></a>我的标题2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo apt install typora</span></pre></td></tr></table></figure><blockquote><p>我不会C</p></blockquote><h1 id="2-菜单"><a href="#2-菜单" class="headerlink" title="2.菜单"></a>2.菜单</h1><p>语法:菜单用 - 或者 *  [我习惯用 -]</p><ul><li>a</li><li>b</li><li>c</li></ul><ul><li>a</li><li>b</li><li>c</li></ul><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h1><p>语法: &gt;</p><p>通常 在引用里 突出你的内容 或 你的话</p><blockquote><p>This is my text</p></blockquote><h1 id="4-粗体-和-斜体"><a href="#4-粗体-和-斜体" class="headerlink" title="4.粗体 和 斜体"></a>4.粗体 和 斜体</h1><p>语法：粗体 ** ** 两颗星  斜体 一颗星</p><p><strong>我是粗体</strong></p><p><em>我是斜体</em></p><h1 id="5-高亮强调"><a href="#5-高亮强调" class="headerlink" title="5.高亮强调"></a>5.高亮强调</h1><p><code>注意:</code> <code>you need to be careful</code></p><h1 id="6-代码高亮"><a href="#6-代码高亮" class="headerlink" title="6.代码高亮"></a>6.代码高亮</h1><h1 id="7-链接"><a href="#7-链接" class="headerlink" title="7.链接"></a>7.链接</h1><p>点击 描述 就是一个链接 </p><p><a href="www.baidu.com">描述</a></p><p>插入图片</p><p>图床</p><p><img src="" alt=""> </p><h1 id="8-插入分割线"><a href="#8-插入分割线" class="headerlink" title="8.插入分割线"></a>8.插入分割线</h1><p>语法: ***</p><hr><hr><h1 id="9-插入视频"><a href="#9-插入视频" class="headerlink" title="9.插入视频"></a>9.插入视频</h1><h1 id="10-表格"><a href="#10-表格" class="headerlink" title="10.表格"></a>10.表格</h1><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>dsf</td><td>fdsfds</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
