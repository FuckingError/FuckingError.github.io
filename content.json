{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Spring-IOC实践","slug":"Spring-IOC实践","date":"2019-12-11T13:09:28.000Z","updated":"2019-12-11T13:09:28.532Z","comments":true,"path":"2019/12/11/Spring-IOC实践/","link":"","permalink":"http://yoursite.com/2019/12/11/Spring-IOC%E5%AE%9E%E8%B7%B5/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Spring:IOC理论","slug":"Spring-IOC理论","date":"2019-12-11T07:41:37.000Z","updated":"2019-12-11T13:28:24.669Z","comments":true,"path":"2019/12/11/Spring-IOC理论/","link":"","permalink":"http://yoursite.com/2019/12/11/Spring-IOC%E7%90%86%E8%AE%BA/","excerpt":"","text":"IOC基础 新建一个空白的maven项目 分析实现 先用之前的方式写一段代码 项目目录结构 这里的目录结构是:project 里面 新建 module 方便管理 一个项目中的多个demo 也算是一个 平时练习一些Demo创建项目的小技巧吧 详情链接 1.先写一个UserDao接口 1public interface UserDao &#123;2 public void getUser();3&#125; 2.再去Dao的实现类 1public class UserDaoImpl implements UserDao &#123;23 public void getUser() &#123;4 System.out.println(\"默认获取用户数据\");5 &#125;6&#125; 3.写UserService的接口 1public interface UserService &#123;2 void getUser();3&#125; 4.Service实现类 1public class UserServiceImpl implements UserService&#123;2 private UserDao userDao = new UserDaoImpl();// Service实现类 调用 Dao34 public void getUser() &#123;5 userDao.getUser();6 &#125;7&#125; 5.测试一下 1public class Mytest &#123;2 public static void main(String[] args) &#123;3 //用户实际 调用的是 业务层,dao层 他们不需要接触4 UserService userService = new UserServiceImpl();5 userService.getUser();6 &#125;7&#125; 这是我们原来的方式 现在在 Dao的实现类 增加一个 6.增加一个Dao 实现类 1//增加一个Dao实现类 此时 就要更改Service的实现类2public class UserDaoMySqlImpl implements UserDao &#123;3 public void getUser() &#123;4 System.out.println(\"MySql获取用户数据\");5 &#125;6&#125; 增加一个Dao实现类 此时 就要更改Service的实现类 7.更改Service实现类 1public class UserServiceImpl implements UserService&#123;2 //private UserDao userDao = new UserDaoImpl();3 private UserDao userDao = new UserDaoMySqlImpl();4 public void getUser() &#123;5 userDao.getUser();6 &#125;7&#125; 再假设 我们再增加一个UserDao 的实现类 则又要修改service实现类,假如 我们这种需求非常大,这种方式就根本不适用了 每次变动，都需要修改大量代码,耦合性太高，牵一发而动全身 那么我们该如何去解决呢 在ServiceImpl中，我们需要用到 UserDao时，不去实现它，而是留出一个接口，利用set,修改代码 1public class UserServiceImpl implements UserService&#123;2 //private UserDao userDao = new UserDaoImpl();3 //private UserDao userDao = new UserDaoMySqlImpl();4 private UserDao userDao;56 //利用set 实现 动态实现值的 注入7 public void setUserDao(UserDao userDao) &#123;8 this.userDao = userDao;9 &#125;1011 public void getUser() &#123;12 userDao.getUser();13 &#125;14&#125; 测试一下 1public class Mytest &#123;2 public static void main(String[] args) &#123;3 //用户实际 调用的是 业务层,dao层 他们不需要接触4 UserServiceImpl service = new UserServiceImpl();5 //使用sql6 service.setUserDao(new UserDaoMySqlImpl());7 service.getUser();89 //改为默认方式10 service.setUserDao(new UserDaoImpl());11 service.getUser();12 &#125;13&#125; 测试结果 可以让用户动态选择 使用 哪一个 Dao实现类 两种方式的区别 之前 所有的东西 都是由 程序(程序员) 去进行控制创建(写死了) 而现在是由调用者自行控制创建对象，把主动权教给了调用者,被调用者不用管怎么创建，怎么实现，它只负责提供一个接口(本例中 提供调用者一个 set方法)，变成了被动的接受对象 这种思想,从 本质 上 解决了问题 代码间的耦合性大大降低 我们程序员也不再去管理对象的创建了（不需要因为Dao层的变动，而去修改Service层的代码）, 可以更多地去关注 业务的实现 这也就是IOC的原型! IOC本质 上面两种问题的解决方法 如下图: 控制反转 IOC（Inversion of Control是一种设计思想 , DI(依赖注入) 是 实现IOC的一种方法 在没有IOC的程序中,我们使用面向对象编程, 对象的创建与对象间的依赖关系 完全硬编码在程序中 对象的创建由程序自己控制 控制反转后 , 将对象的创建 转移给 第三方 控制反转可以理解为: 获得依赖对象的方式 反转了 IOC 是Spring框架的 核心内容 , 使用多种方式 完美地实现了 IOC , 可以使用XML配置 , 也可以使用注解 , 新版本的Spring也可以 零配置 实现IOC 控制反转 是 一种 通过描述(XML 或 注解) 并通过 第三方 去生产 或 获取特定对象的 方式. 在Spring中 实现 控制反转的是 IOC 容器,其实现方式是 依赖注入(Dependency Injection,DI).","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}]},{"title":"markdown常用语法","slug":"markdown常用语法","date":"2019-12-11T07:22:58.000Z","updated":"2019-12-11T07:28:51.128Z","comments":true,"path":"2019/12/11/markdown常用语法/","link":"","permalink":"http://yoursite.com/2019/12/11/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/","excerpt":"","text":"你们好","categories":[],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"第一篇博客","slug":"第一篇博客","date":"2019-12-06T03:58:20.350Z","updated":"2019-12-11T07:43:19.323Z","comments":true,"path":"2019/12/06/第一篇博客/","link":"","permalink":"http://yoursite.com/2019/12/06/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1.我的标题我的标题21sudo apt install typora 我不会C 2.菜单语法:菜单用 - 或者 * [我习惯用 -] a b c a b c 3.引用语法: &gt; 通常 在引用里 突出你的内容 或 你的话 This is my text 4.粗体 和 斜体语法：粗体 ** ** 两颗星 斜体 一颗星 我是粗体 我是斜体 5.高亮强调注意: you need to be careful 6.代码高亮7.链接点击 描述 就是一个链接 描述 插入图片 图床 8.插入分割线语法: *** 9.插入视频10.表格 按键 功能 dsf fdsfds","categories":[],"tags":[]}]}